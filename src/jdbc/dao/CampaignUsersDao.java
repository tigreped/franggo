/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package jdbc.dao;

import jdbc.dto.*;
import jdbc.exceptions.*;

public interface CampaignUsersDao
{
	/** 
	 * Inserts a new row in the CAMPAIGN_USERS table.
	 */
	public void insert(CampaignUsers dto) throws CampaignUsersDaoException;

	/** 
	 * Returns all rows from the CAMPAIGN_USERS table that match the criteria ''.
	 */
	public CampaignUsers[] findAll() throws CampaignUsersDaoException;

	/** 
	 * Returns all rows from the CAMPAIGN_USERS table that match the criteria 'CAMPAIGN_ID = :campaignId'.
	 */
	public CampaignUsers[] findWhereCampaignIdEquals(int campaignId) throws CampaignUsersDaoException;

	/** 
	 * Returns all rows from the CAMPAIGN_USERS table that match the criteria 'USER_ID = :userId'.
	 */
	public CampaignUsers[] findWhereUserIdEquals(int userId) throws CampaignUsersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CAMPAIGN_USERS table that match the specified arbitrary SQL statement
	 */
	public CampaignUsers[] findByDynamicSelect(String sql, Object[] sqlParams) throws CampaignUsersDaoException;

	/** 
	 * Returns all rows from the CAMPAIGN_USERS table that match the specified arbitrary SQL statement
	 */
	public CampaignUsers[] findByDynamicWhere(String sql, Object[] sqlParams) throws CampaignUsersDaoException;

}
